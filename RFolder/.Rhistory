bbdf_clean %>% ggplot(mapping = aes(x = ABV, y = IBU), fill = State) + geom_point() + ggtitle("ABV vs IBU") + xlab("ABV") + ylab("IBU")
bbdf_clean %>% ggplot(mapping = aes(x = ABV, y = IBU), color = State) + geom_point() + ggtitle("ABV vs IBU") + xlab("ABV") + ylab("IBU")
bbdf_clean %>% ggplot(mapping = aes(x = ABV, y = IBU), color = State) + geom_point() + ggtitle("ABV vs IBU") + xlab("ABV") + ylab("IBU")
bbdf_clean %>% ggplot(mapping = aes(x = ABV, y = IBU)) + geom_point(color = State) + ggtitle("ABV vs IBU") + xlab("ABV") + ylab("IBU")
bbdf_clean %>% ggplot(mapping = aes(x = ABV, y = IBU, color = State)) + geom_point() + ggtitle("ABV vs IBU") + xlab("ABV") + ylab("IBU")
bbdf_clean %>% filter(State == 'KY') %>% ggplot(mapping = aes(x = ABV, y = IBU, color = State)) + geom_point() + ggtitle("ABV vs IBU") + xlab("ABV") + ylab("IBU")
bbdf_clean %>% ggplot(mapping = aes(x = ABV, y = IBU, color = State)) + geom_point() + ggtitle("ABV vs IBU") + xlab("ABV") + ylab("IBU")
abline(lm(bbdf_clean$ABV ~ bbdf_clean$IBU) col = "blue")
bbdf_clean %>% ggplot(mapping = aes(x = ABV, y = IBU, color = State)) + geom_point() + ggtitle("ABV vs IBU") + xlab("ABV") + ylab("IBU")
abline(lm(bbdf_clean$ABV ~ bbdf_clean$IBU), col = "blue")
bbdf_clean %>% ggplot(mapping = aes(x = ABV, y = IBU, color = State)) + geom_point() +  geom_smooth(method='lm', formula= y~x) ggtitle("ABV vs IBU") + xlab("ABV") + ylab("IBU")
bbdf_clean %>% ggplot(mapping = aes(x = ABV, y = IBU, color = State)) + geom_point() +  geom_smooth(method='lm', formula= y~x) + ggtitle("ABV vs IBU") + xlab("ABV") + ylab("IBU")
bbdf_clean %>% ggplot(mapping = aes(x = ABV, y = IBU)) + geom_point(mapping = aes(x = ABV, y = IBU, color = State)) +  geom_smooth(method='lm', formula= y~x) + ggtitle("ABV vs IBU") + xlab("ABV") + ylab("IBU")
bbdf_clean %>% ggplot(mapping = aes(x = ABV, y = IBU)) + geom_point(mapping = aes(x = ABV, y = IBU, color = State, position = "jitter")) +  geom_smooth(method='lm', formula= y~x) + ggtitle("ABV vs IBU") + xlab("ABV") + ylab("IBU")
bbdf_clean %>% ggplot(mapping = aes(x = ABV, y = IBU)) + geom_point(mapping = aes(x = ABV, y = IBU, color = State), position = "jitter") +  geom_smooth(method='lm', formula= y~x) + ggtitle("ABV vs IBU") + xlab("ABV") + ylab("IBU")
bbdf_clean
bbdf_clean %>% filter(str_detect(Style,"Ale"))
library(stringr)
bbdf_clean %>% filter(str_detect(Style,"Ale"))
bbdf_clean %>% filter(str_detect(Style,"IPA"))
bbdf_clean %>% filter(str_detect(Style,"IPA", ignore.case = TRUE) ! str_detect(Style,"Ale", ignore.case = TRUE))
bbdf_clean %>% filter(str_detect(Style,"IPA", ignore.case = TRUE) || str_detect(Style,"Ale", ignore.case = TRUE))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(maps)
library(dplyr)
library(mapproj)
Acu = read.csv(file.choose(),header = TRUE) # read in company data
lookup = data.frame(abb = state.abb, State = state.name) #makes a data frame with State name and abbreviation.
colnames(Acu)[2] = "abb" # Change Column Name
Acu2 = merge(Acu,lookup,"abb") # make one dataset with state names and abb
AcuMapData = count(Acu2,State) #count up the occurance of each state.
#AcuMapData = AcuMapData[-c(5,9,43),] #Shows contrast between other states better
colnames(AcuMapData)[2] = "AcuSpikes" #change "n" to "Acuspikes"
AcuMapData$region <- tolower(AcuMapData$State)
AcuMapData2 = AcuMapData[-1]
states <- map_data("state")
map.df <- merge(states,AcuMapData2, by="region", all.x=T)
map.df <- map.df[order(map.df$order),]
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=AcuSpikes))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+ggtitle("Acuspike Systems by State")+
coord_map()
string5 = " \"I've missed more than 9000 shots in my career. I've lost almost 300 games. 26 times, I've been trusted to take the game winning shot and missed. I've failed over and over and over again in my life. And that is why I succeed.\" - Michael Jordan"
str_view(string5, "shot")
str_view_all(string5,"shot")
str_view_all(string5,"shot\\.")
str_view_all(string5,"\\bshot\\b") #Important
bbdf_clean %>% filter(str_detect(Style,"(IPA| Ale)")
bbdf_clean %>% filter(str_detect(Style,"(IPA| Ale)"))
bbdf_clean %>% filter(str_detect(Style,"(IPA| Ale)"))
bbdf_Ales = bbdf_clean %>% filter(str_detect(Style,"(IPA| Ale)"))
str_detect(bbdf_Ales$Style,"IPA")
bbdf_Ales$IPAFlag = if(str_detect(bbdf_Ales$Style,"IPA") = TRUE) { bbdf_Ales$IPAFlag = "IPA"} else { bbdf_Ales$IPAFlag = "Other Ales"}
bbdf_Ales$IPAFlag = if(str_detect(bbdf_Ales$Style,"IPA") == TRUE) { bbdf_Ales$IPAFlag = "IPA"} else { bbdf_Ales$IPAFlag = "Other Ales"}
head(bbdf_Ales)
str_detect(bbdf_Ales$Style,"IPA")
bbdf_Ales$IPAFlag = if(str_detect(bbdf_Ales$Style,"IPA") == TRUE) bbdf_Ales$IPAFlag = "IPA" else  bbdf_Ales$IPAFlag = "Other Ales"
bbdf_Ales$IPAFlag = if(str_detect(bbdf_Ales$Style,"IPA") = TRUE) bbdf_Ales$IPAFlag = "IPA" else  bbdf_Ales$IPAFlag = "Other Ales"
bbdf_Ales$IPAFlag = if(str_detect(bbdf_Ales$Style,"IPA") == TRUE) bbdf_Ales$IPAFlag = "IPA" else  bbdf_Ales$IPAFlag = "Other Ales"
string6 = " \"Sometimes when you innovate, you make mistakes. It is best to admit them quickly, and get on with improving your other innovations.\" - Steve Jobs"
string1 = "Don't let what you can't do interfere with what you can do."
string2 = "\"Don't let what you can't do interfere with what you can do.\" - John Wooden"
writeLines(string2)
string3 = c("IF","YOU","GET","GIVE,", "IF","YOU","LEARN","TEACH", "-MAYA", "ANGELOU")
string3
#strinr functions
str_length(string3)
#Collapse Strings... put them together
str_c(string3)
#Collapse Strings... put them together
str_c(string3, collapse = "")
#Collapse Strings... put them together
str_c(string3, collapse = ",")
#Collapse Strings... put them together
str_c(string3, collapse = " ")
string4 = str_c(string3, collapse = " ")
string4
str_sub(string4,1,1)
str_sub(string4,1,7)
str_sub(string4,-3,-1)
str_sub(string4,-14,-1)
str_sub(string4,3,7)
df = data.frame(quotes = c(string2,string4,string5,string6))
df$quotes
str_count(string5,"shot")
str_detect(string5,"shot")
grepl("shot",df$quotes)
sum(str_detect(df$quotes,"John Wooden"))
if(str_detect(bbdf_Ales$Style,"IPA") = TRUE) { bbdf_Ales$IPAFlag = "IPA"} else { bbdf_Ales$IPAFlag = "Other Ales"}
if(str_detect(bbdf_Ales$Style,"IPA") == TRUE) { bbdf_Ales$IPAFlag = "IPA"} else { bbdf_Ales$IPAFlag = "Other Ales"}
head(bbdf_Ales)\
head(bbdf_Ales)
bbdf_Ales$IPAFlag = if(str_detect(bbdf_Ales$Style,"IPA") == TRUE) bbdf_Ales$IPAFlag = "IPA" else  bbdf_Ales$IPAFlag = "Other Ales"
if(str_detect(bbdf_Ales$Style,"IPA") == TRUE)
"good" else "bad"
bbdf_Ales %>% mutate(IPAFlag = case_when(str_detect(bbdf_Ales$Style,"IPA") == TRUE ~ "IPA", TRUE ~ "Other Ales" )
)
summary(bbdf_Ales)
dim(bbdf_Ales)
bbdf_Ales[,c(4,5)]
# find the best K
set.seed(1)
iterations = 500
numks = 90
splitPerc = .70
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
trainIndices = sample(1:dim(bbdf_Ales)[1],round(splitPerc * dim(bbdf_Ales)[1]))
train = bbdf_Ales[trainIndices,]
test = bbdf_Ales[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(4,5)],test[,c(4,6)],train$IPAFlag, prob = TRUE, k = i)
table(classifications,test$IPAFlag)
CM = confusionMatrix(table(classifications,test$IPAFlag))
masterAcc[j,i] = CM$overall[1]
}
}
library(class)
library(caret)
library(e1071)
# find the best K
set.seed(1)
iterations = 500
numks = 90
splitPerc = .70
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
trainIndices = sample(1:dim(bbdf_Ales)[1],round(splitPerc * dim(bbdf_Ales)[1]))
train = bbdf_Ales[trainIndices,]
test = bbdf_Ales[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(4,5)],test[,c(4,6)],train$IPAFlag, prob = TRUE, k = i)
table(classifications,test$IPAFlag)
CM = confusionMatrix(table(classifications,test$IPAFlag))
masterAcc[j,i] = CM$overall[1]
}
}
# find the best K
set.seed(1)
iterations = 500
numks = 90
splitPerc = .70
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
trainIndices = sample(1:dim(bbdf_Ales)[1],round(splitPerc * dim(bbdf_Ales)[1]))
train = bbdf_Ales[trainIndices,]
test = bbdf_Ales[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(4,5)],test[,c(4,5)],train$IPAFlag, prob = TRUE, k = i)
table(classifications,test$IPAFlag)
CM = confusionMatrix(table(classifications,test$IPAFlag))
masterAcc[j,i] = CM$overall[1]
}
}
bbdf_Ales$IPAFlag = as.factor(bbdf_Ales$IPAFlag)
# find the best K
set.seed(1)
iterations = 500
numks = 90
splitPerc = .70
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
trainIndices = sample(1:dim(bbdf_Ales)[1],round(splitPerc * dim(bbdf_Ales)[1]))
train = bbdf_Ales[trainIndices,]
test = bbdf_Ales[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(4,5)],test[,c(4,5)],train$IPAFlag, prob = TRUE, k = i)
table(classifications,test$IPAFlag)
CM = confusionMatrix(table(classifications,test$IPAFlag))
masterAcc[j,i] = CM$overall[1]
}
}
# find the best K
set.seed(1)
iterations = 500
numks = 90
splitPerc = .70
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
trainIndices = sample(1:dim(bbdf_Ales)[1],round(splitPerc * dim(bbdf_Ales)[1]))
train = bbdf_Ales[trainIndices,]
test = bbdf_Ales[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(4,5)],test[,c(4,5)],train$IPAFlag, prob = TRUE, k = i)
CM = confusionMatrix(table(classifications,test$IPAFlag))
masterAcc[j,i] = CM$overall[1]
}
}
train
bbdf_Ales$IPAFlag = bbdf_Ales %>% mutate(IPAFlag = case_when(str_detect(bbdf_Ales$Style,"IPA") == TRUE ~ "IPA", TRUE ~ "Other Ales" ))
library(class)
library(caret)
library(e1071)
# find the best K
set.seed(1)
iterations = 500
numks = 90
splitPerc = .70
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
trainIndices = sample(1:dim(bbdf_Ales)[1],round(splitPerc * dim(bbdf_Ales)[1]))
train = bbdf_Ales[trainIndices,]
test = bbdf_Ales[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(4,5)],test[,c(4,5)],train$IPAFlag, prob = TRUE, k = i)
CM = confusionMatrix(table(classifications,test$IPAFlag))
masterAcc[j,i] = CM$overall[1]
}
}
train
test
bbdf_Ales = bbdf_clean %>% filter(str_detect(Style,"(IPA| Ale)"))
bbdf_Ales$IPAFlag = bbdf_Ales %>% mutate(IPAFlag = case_when(str_detect(bbdf_Ales$Style,"IPA") == TRUE ~ "IPA", TRUE ~ "Other Ales" ))
summary(bbdf_Ales)
bbdf_Ales = bbdf_clean %>% filter(str_detect(Style,"(IPA| Ale)"))
summary(bbdf_Ales)
bbdf_Ales %>% mutate(IPAFlag = case_when(str_detect(bbdf_Ales$Style,"IPA") == TRUE ~ "IPA", TRUE ~ "Other Ales" ))
summary(bbdf_Ales)
bbdf_Ales = bbdf_Ales %>% mutate(IPAFlag = case_when(str_detect(bbdf_Ales$Style,"IPA") == TRUE ~ "IPA", TRUE ~ "Other Ales" ))
summary(bbdf_Ales)
bbdf_Ales$IPAFlag = as.factor(bbdf_Ales$IPAFlag)
library(class)
library(caret)
library(e1071)
# find the best K
set.seed(1)
iterations = 500
numks = 90
splitPerc = .70
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
trainIndices = sample(1:dim(bbdf_Ales)[1],round(splitPerc * dim(bbdf_Ales)[1]))
train = bbdf_Ales[trainIndices,]
test = bbdf_Ales[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(4,5)],test[,c(4,5)],train$IPAFlag, prob = TRUE, k = i)
CM = confusionMatrix(table(classifications,test$IPAFlag))
masterAcc[j,i] = CM$overall[1]
}
}
MeanAcc = colMeans(masterAcc)
plot(seq(1,numks,1),MeanAcc, type = "l")
which.max(MeanAcc)
max(MeanAcc)
plot(seq(1,numks,1),MeanAcc, type = "l")
abline(v = 5, col = 'green')
abline(h = .8589, col = 'green')
classifications = knn(train[,c(4,5)],test[,c(4,5)],train$IPAFlag, prob = TRUE, k = 5)
CM = confusionMatrix(table(classifications,test$IPAFlag))
CM
library(ggplot2)
library(maps)
library(dplyr)
library(mapproj)
lookup = data.frame(abb = state.abb, State = state.name)
lookup
bbdf_clean
merge(bbdf_clean, lookup, by.x = "State", by.y = "abb")
bbdf_map = merge(bbdf_clean, lookup, by.x = "State", by.y = "abb")
bbdf_map
names(bbdf_map$State) = "StateCode"
names(bbdf_map$State.y) = "State"
bbdf_map
summmary(bbdf_map)
summary(bbdf_map)
colnames(bbdf_map$State) = "StateCode"
colnames(bbdf_map)[1] = "StateCode"
colnames(bbdf_map)[11] = "State"
summary(bbdf_map)
AcuMapData = count(Acu2,State)
AcuMapData
bbdf_map$region <- tolower(bbdf_map$State)
bbdf_map
SummaryBrewery
bbdf_map
lookup = data.frame(abb = state.abb, State = state.name)
bbdf_map = merge(bbdf_Ales, lookup, by.x = "State", by.y = "abb")
bbdf_map
summary(bbdf_Ales)
summary(bbdf_map)
colnames(bbdf_map)[1] = "StateCode"
colnames(bbdf_map)[12] = "State"
bbdf_map$region <- tolower(bbdf_map$State)
summary(bbdf_map)
bbdf_map %>% group_by(region)
bbdf_map %>% group_by(region, IPAFlag)
bbdf_map %>% group_by(region, IPAFlag) %>% summarize(count = count())
bbdf_map %>% group_by(region, IPAFlag) %>% summarize(cnt = count())
bbdf_map %>% group_by(region, IPAFlag) %>% summarize(cnt = n())
Beers
bbdf %>% group_by(State) %>% summarize(cnt = n())
bbdf %>% filter(State = 'AL')
bbdf %>% filter(State == 'AL')
bbdf_map %>% group_by(region, IPAFlag) %>% summarize(cnt = n(), meanABV = mean(ABV), meanIBU = mean(IBU))
bbdf_map_summary = bbdf_map %>% group_by(region, IPAFlag) %>% summarize(cnt = n(), meanABV = mean(ABV), meanIBU = mean(IBU))
bbdf_map_summary
states <- map_data("state")
map.df <- merge(states,bbdf_map_summary, by="region", all.x=T)
map.df <- map.df[order(map.df$order),]
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=cnt))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+ggtitle("Beer type Count by State")+
coord_map()
map.df
bbdf_map_summary %>% filter(region == 'california')
map.df <- merge(states,bbdf_map_summary, by="region", all.x=T)
map.df <- merge(states,bbdf_map_summary[IPAFlag == 'IPA'], by="region", all.x=T)
map.df <- bbdf_map_summary %>% filter(IPAFlag == "IPA") %>% merge(states, by="region", all.x=T)
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=cnt))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+ggtitle("Beer type Count by State")+
coord_map()
map.df <- map.df[order(map.df$order),]
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=cnt))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+ggtitle("Beer type Count by State")+
coord_map()
states <- map_data("state")
map.df <- bbdf_map_summary %>% filter(IPAFlag == "IPA") %>% merge(states, by="region", all.x=T)
map.df <- map.df[order(map.df$order),]
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=cnt))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+ggtitle("IPA Count by State")+
coord_map()
map.df <- bbdf_map_summary %>% filter(IPAFlag == "Other Ales") %>% merge(states, by="region", all.x=T)
map.df <- map.df[order(map.df$order),]
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=cnt))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+ggtitle("Other Ales Count by State")+
coord_map()
bbdf %>% head(6)
lookup = data.frame(abb = state.abb, State = state.name)
bbdf_map = merge(bbdf, lookup, by.x = "State", by.y = "abb")
bbdf_map
colnames(bbdf_map)[1] = "StateCode"
colnames(bbdf_map)[12] = "State"
lookup = data.frame(abb = state.abb, State = state.name)
bbdf_map = merge(bbdf, lookup, by.x = "State", by.y = "abb")
bbdf_map
summary(bbdf_map)
colnames(bbdf_map)[1] = "StateCode"
colnames(bbdf_map)[11] = "State"
summary(bbdf_map)
head(bbdf_map)
bbdf_map$region <- tolower(bbdf_map$State)
bbdf_map_summary = bbdf_map %>% group_by(region) %>% summarize(cnt = n(), meanABV = mean(ABV, na.rm = TRUE), meanIBU = mean(IBU,  na.rm = TRUE))
summary(bbdf_map_summary)
states <- map_data("state")
# below is the code for creating the Mean ABV by State
# ------
map.df <- bbdf_map_summary %>% merge(states, by="region", all.x=T)
map.df <- map.df[order(map.df$order),]
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill= meanABV))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+ggtitle("Mean ABV by State")+
coord_map()
# ------
# below is the code for creating the Other Ales heat map
# ----
map.df <- bbdf_map_summary  %>% merge(states, by="region", all.x=T)
map.df <- map.df[order(map.df$order),]
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=meanIBU))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+ggtitle(" Mean IBU by State")+
coord_map()
# below is the code for creating the Beer Count heat map
# ----
map.df <- bbdf_map_summary  %>% merge(states, by="region", all.x=T)
map.df <- map.df[order(map.df$order),]
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=cnt))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+ggtitle("Beer Count by State")+
coord_map()
#
# below is the code for creating the Mean ABV by State
# ------
map.df <- bbdf_map_summary %>% merge(states, by="region", all.x=T)
map.df <- map.df[order(map.df$order),]
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill= meanABV))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+ggtitle("Mean ABV by State")+
coord_map()
# ------
# below is the code for creating the Other Ales heat map
# ----
map.df <- bbdf_map_summary  %>% merge(states, by="region", all.x=T)
map.df <- map.df[order(map.df$order),]
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=meanIBU))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+ggtitle(" Mean IBU by State")+
coord_map()
#
# below is the code for creating the Beer Count heat map
# ----
map.df <- bbdf_map_summary  %>% merge(states, by="region", all.x=T)
map.df <- map.df[order(map.df$order),]
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=cnt))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+ggtitle("Beer Count by State")+
coord_map()
#
library(RCurl) #getURL
library(XML) #xml_Parse
install.packages("censusapi")
library(censusapi)
apis <- listCensusApis()
View(apis)
install.packages("tidycensus")
library(tidycensus)
census_api_key("60e6bde9f7a79e136e60fbbb59ce47e85938deb5", install = TRUE)
readRenviron("~/.Renviron")
v21 <- load_variables(2021, "acs5")
v18 <- load_variables(2018, "acs5")
View(Breweries)
View(v18)
pop2021 = get_acs(geography = "state", variable = "B01003_001", year = 2021)
pop2021 = get_acs(geography = "state", variable = "B01003_001", year = 2020)
pop2021 = get_acs(geography = "state", variable = "B01003_001", year = 2018)
View(pop2021)
v18 <- load_variables(2020, "acs5")
v18 <- load_variables(2019, "acs5")
view(v18)
View(v18)
pop2019 = get_acs(geography = "state", variable = "B01003_001", year = 2019)
pop2019 = get_acs(geography = "state", variable = "B01003_001", year = 2020)
View(pop2019)
pop2019$region = tolower(pop2019$NAME)
pop2019
pop2019$per100k = pop2019$estimate / 100000
pop2019
bbdf_map_summary2 = bbdf_map_summary %>% merge(pop2019, by="region", all.x=T)
bbdf_map_summary2
bbdf_map_summary2 = bbdf_map_summary %>% merge(pop2019[, "per100k"], by="region", all.x=T)
bbdf_map_summary2 = bbdf_map_summary %>% merge(pop2019[, per100k], by="region", all.x=T)
bbdf_map_summary2 = bbdf_map_summary %>% merge(pop2019[, c("region","per100k")], by="region", all.x=T)
bbdf_map_summary2
bbdf_map_summary2$perCapita = bbdf_map_summary2$cnt / bbdf_map_summary2$per100k
bbdf_map_summary2
states <- map_data("state")
map.df <- bbdf_map_summary2 %>% merge(states, by="region", all.x=T)
map.df <- map.df[order(map.df$order),]
# below is the code for creating the Mean ABV by State
# ------
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill= meanABV))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+ggtitle("Mean ABV by State")+
coord_map()
# ------
# below is the code for creating the Other Ales heat map
# ----
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=meanIBU))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+ggtitle(" Mean IBU by State")+
coord_map()
#
# below is the code for creating the Beer Count heat map
# ----
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=cnt))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+ggtitle("Beer Count by State")+
coord_map()
#
# below is the code for creating the Beer Count heat map
# ----
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=perCapita))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+ggtitle("Per Capita by State")+
coord_map()
#
handicap = read.csv(file.choose(), header = T)
fit = aov(Score ~ Handicap, data = handicap)
summary(fit)
install.packages(agricolae)
install.packages("agricolae")
install.packages("agricolae")
install.packages("agricolae")
install.packages("agricolae")
library(agricolae)
cv.model(fit)
fit
LsD.test(fit,"Handicap", console = TRUE)
